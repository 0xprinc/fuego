package templa

import (
	"strconv"
	"simple-crud/store"
	"simple-crud/templa/components"
	"github.com/go-fuego/fuego"
)

func Unsafe(html string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		_, err = io.WriteString(w, html)
		return
	})
}

type GeneralProps struct {
	Title   string
	IsAdmin bool
}

type RecipePageProps struct {
	Recipe         store.Recipe
	Ingredients    []store.GetIngredientsOfRecipeRow
	RelatedRecipes []store.Recipe
}

templ RecipePage(props RecipePageProps, generalProps GeneralProps) {
	@page("Recipe") {
		<div class="container mx-auto p-4 md:p-8 flex flex-col md:flex-row md:justify-between gap-6">
			<div class="rounded-lg shadow-sm md:flex md:flex-row">
				<div class="md:p-4 md:w-1/3">
					<div>
						<img
 							if props.Recipe.ImageUrl != "" {
								src={ props.Recipe.ImageUrl }
							} else {
								src="https://www.totalchaletservices.com/media/s43joq31/dinner-placeholder.png"
							}
 							alt="Recipe image"
 							class="w-full h-auto object-cover mb-5 rounded-lg shadow-md"
 							width="400"
 							height="300"
 							style="aspect-ratio: 400 / 300; object-fit: cover;"
						/>
					</div>
					<h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-200  mt-4">Ingredients</h2>
					<ul class="list-disc list-inside text-sm text-gray-700 dark:text-gray-300 my-2">
						for _, dosing := range props.Ingredients {
							<li>{ dosing.Ingredient.Name } - { strconv.Itoa(int(dosing.Quantity)) } { string(dosing.Unit) }</li>
						}
					</ul>
				</div>
				<div class="md:p-4 md:w-2/3">
					<div>
						<hgroup class="flex items-center justify-between">
							<h1 class="text-4xl font-bold text-gray-800 dark:text-gray-200 md:mt-0">
								{ props.Recipe.Name }
							</h1>
							if generalProps.IsAdmin {
								<a className="bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 rounded">Edit</a>
							}
						</hgroup>
						<div class="flex items-center justify-between my-4">
							<span class="text-sm text-gray-600 dark:text-gray-400 uppercase">Pasta</span>
							<div class="inline-flex items-center rounded-full border px-2.5 py-0.5 w-fit text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 border-transparent hover:bg-primary/80 bg-gray-500 text-white">New</div>
						</div>
						<div class="flex justify-between items-center mb-4">
							<p class="text-sm text-gray-600 dark:text-gray-400 flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 mr-2">
									<circle cx="12" cy="12" r="10"></circle>
									<polyline points="12 6 12 12 16 14"></polyline>
								</svg>
								Prep Time: 
								<span class="font-semibold ml-1">
									{ strconv.Itoa(int(props.Recipe.PrepTime)) }
									mins
								</span>
							</p>
							<p class="text-sm text-gray-600 dark:text-gray-400 flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 mr-2">
									<path d="M6 13.87A4 4 0 0 1 7.41 6a5.11 5.11 0 0 1 1.05-1.54 5 5 0 0 1 7.08 0A5.11 5.11 0 0 1 16.59 6 4 4 0 0 1 18 13.87V21H6Z"></path>
									<line x1="6" x2="18" y1="17" y2="17"></line>
								</svg>
								Cooking Time: 
								<span class="font-semibold ml-1">
									{ strconv.Itoa(int(props.Recipe.CookTime)) } mins
								</span>
							</p>
						</div>
						<div class="flex justify-between items-center mb-4">
							<p class="text-sm text-gray-600 dark:text-gray-400">
								Calories: 
								{ strconv.Itoa(int(props.Recipe.Calories)) }
								kcal
							</p>
							<p class="text-sm text-gray-600 dark:text-gray-400 flex items-center">
								Difficulty: Medium
							</p>
						</div>
						<div class="flex justify-between items-center mb-4">
							<p class="text-sm text-gray-600 dark:text-gray-400 flex items-center">
								<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-4 h-4 mr-2">
									<polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2"></polygon>
								</svg>
								Popularity:
								<span class="font-semibold ml-1">4.5/5</span>
							</p>
							<p class="text-sm text-gray-600 dark:text-gray-400">
								Author: 
								{ props.Recipe.CreatedBy }
							</p>
						</div>
						<p class="text-sm text-gray-700 dark:text-gray-300 my-2 italic">
							{ props.Recipe.Description }
						</p>
						<h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mt-4">Instructions</h2>
						<p class="dark:text-gray-100">
							@Unsafe(string(fuego.Markdown(props.Recipe.Instructions)))
						</p>
					</div>
				</div>
			</div>
			<aside class="md:pt-4 min-w-48">
				<h2 class="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-4 mt-0">Related Recipes</h2>
				<div class="flex flex-col gap-6">
					for _, recipe:= range props.RelatedRecipes {
						@components.Card(components.CardProps{
							Title: recipe.Name,
							ImageURL: recipe.ImageUrl,
							Body: recipe.Description,
							Link: "/recipes/one?id="+recipe.ID,
						})
					}
				</div>
			</aside>
		</div>
	}
}
